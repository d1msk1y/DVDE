using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ActorShooting : MonoBehaviour
{
    [Header("Essential references")]
    public Transform _firePos;
    public GameObject _gunObj;

    private LineRenderer _lineRenderer;
    private SpriteRenderer _spriteRenderer;
    private Joystick _shootingJoystick;

    [Header("Shooting properties")]
    public int gunIndex;

    public Gun defaultGun;
    public Gun gunScript;
    public Gun knife;

    [SerializeField] private float _gunThrowForce;
    [SerializeField] private float _bulletScaleModifier;
    [SerializeField] private float _gunThrowAimLength;

    public int criticalDamageChance;
    public int ammos;
    public int extraAmmos;
    private int _damage;

    public float extraAmmosPercent;
    public float damageModifier;
    public float aimLength;
    private float _recoilForce;
    private float _bulletSpeed;
    private float _rechargeSpeed;
    private float _bulletLifetime;

    [Header("Particles")]
    public ParticleSystem shotParticle;
    public LineRenderer _aimLineRenderer;

    [Header("Particles")]
    private float _currentRecharge;
    private Vector3 _handlerScale;
    private float angle;
    bool _isRecharged = true;

    private void Start()
    {
        defaultGun = GameManager.instance.itemsManager.
            buyableGuns[PlayerPrefs.GetInt("Picked gun")].gunProperties;

        GameManager.instance.itemsManager.purchasedWeapons =
            GameManager.instance.itemsManager.checkPurchasedGuns();

        gunScript = _gunObj.GetComponentInChildren<Gun>();
        GiveWeapon(defaultGun);
        GameManager.instance.UiManager.SetAmmoStats(ammos, gunScript.ammos);
        _lineRenderer = GetComponent<LineRenderer>();
        _spriteRenderer = GetComponent<SpriteRenderer>();
        _shootingJoystick = GameManager.instance.UiManager.shootingJoystick;
    }

    private void Update()
    {
#if UNITY_EDITOR

        if (GameManager.instance.isCurrentBattle && GameManager.instance.lvlManager.lvlController != null)
        {

            Transform closestEnemy = GetClosestEnemy(GameManager.instance.lvlManager.lvlController.currentEnemiesInAction);//End point of a ray
            if (closestEnemy == null)
                return;
            Vector2 lookPos = closestEnemy.position;
            Vector2 lookDir = lookPos - new Vector2(transform.position.x, transform.position.y);
            angle = Mathf.Atan2(lookDir.y, lookDir.x) * Mathf.Rad2Deg;//Geting needed gun rotation angle 
            _gunObj.transform.rotation = Quaternion.Euler(0, 0, angle);

            if (ammos <= 0 && !gunScript.gameObject.CompareTag("Knife"))
            {
                _lineRenderer.SetPosition(0, _firePos.position);
                _lineRenderer.SetPosition(1, lookPos);
            }

        }

#endif
        if (_currentRecharge > 0)
            _currentRecharge -= _rechargeSpeed * Time.deltaTime;
        if (_currentRecharge <= 0)
            _isRecharged = true;

        if(_shootingJoystick.Horizontal != 0 || _shootingJoystick.Vertical != 0)
        {
            float stickAngle = Mathf.Atan2(_shootingJoystick.Vertical, _shootingJoystick.Horizontal) * Mathf.Rad2Deg;
            _gunObj.transform.rotation = Quaternion.Euler(0, 0, stickAngle);

            _aimLineRenderer.SetPosition(0, _firePos.position);
            _aimLineRenderer.SetPosition(1, _firePos.position +
                new Vector3(_shootingJoystick.Horizontal, _shootingJoystick.Vertical).normalized * aimLength);

            if (ammos <= 0 && !gunScript.gameObject.CompareTag("Knife"))
            {
                _lineRenderer.SetPosition(0, _firePos.position);
                _lineRenderer.SetPosition(1, transform.position + new Vector3(_shootingJoystick.Horizontal,
                    _shootingJoystick.Vertical) * _gunThrowAimLength);
            }
        }

        _gunObj.transform.localScale = Vector3.Lerp(_gunObj.transform.localScale, _handlerScale, 10f * Time.deltaTime);

        if (gunScript.weaponType == WeaponType.Knife)
        {
            return;
        }

        if (angle > -90 && angle < 90 || _shootingJoystick.Horizontal > 0)
        {
            _handlerScale = new Vector3(1, 1, 1);
            PlayerController.instance.clothSlotController.glassesSlot.transform.localScale = new Vector3(1, 1, 1);
        }
        else
        {
            _handlerScale = new Vector3(1, -1, 1);
            PlayerController.instance.clothSlotController.glassesSlot.transform.localScale = new Vector3(-1, 1, 1);
        }
        if(_shootingJoystick.Horizontal < 0)
        {
            _handlerScale = new Vector3(1, -1, 1);
            PlayerController.instance.clothSlotController.glassesSlot.transform.localScale = new Vector3(-1, 1, 1);
        }
    }

    private Transform GetClosestEnemy(GameObject[] enemies)
    {
        Transform tMin = null;
        float minDist = Mathf.Infinity;
        Vector3 currentPos = transform.position;
        foreach (GameObject t in enemies)
        {
            if (t == null)
                return null;
            float dist = Vector3.Distance(t.transform.position, currentPos);
            if (dist < minDist)
            {
                tMin = t.transform;
                minDist = dist;
            }
        }
        return tMin;
    }

    public void GiveWeapon(Gun gun2Give)
    {
        if (gun2Give == gunScript)
            return;
        Destroy(gunScript.gameObject);
        _gunObj.transform.localScale = Vector3.one;
        GameObject gunObject = Instantiate(gun2Give.gameObject, _gunObj.transform.position, Quaternion.identity,
            _gunObj.transform);
        gunScript.transform.eulerAngles = Vector3.zero;
        gunScript = gunObject.GetComponent(typeof(Gun)) as Gun;

        if (PlayerPrefs.HasKey(GameManager.instance.dataManager.specsKeys[3]))
            extraAmmosPercent = PlayerPrefs.GetFloat(GameManager.instance.dataManager.specsKeys[3]);
        extraAmmos = (int)(gunScript.ammos * (extraAmmosPercent / 100));

        SetGunProperties();
        GameManager.instance.UiManager.SetGunName(gun2Give.gunName);
        GameManager.instance.UiManager.SetAmmoStats(ammos, gunScript.ammos);
    }

    public void ThrowGun(GameObject gun2throw)
    {
        if (ammos > 0 || gunScript == null || gunScript.CompareTag("Knife"))
        {
            return;
        }
        Destroy(gunScript);
        GameObject throwedGun = Instantiate(gun2throw, _firePos.position, Quaternion.identity);
        throwedGun.GetComponent<Rigidbody2D>().AddForce(_firePos.right * _gunThrowForce, ForceMode2D.Impulse);
        throwedGun.GetComponent<Rigidbody2D>().angularVelocity = 1000;
        ClearAllLines();
        GiveWeapon(knife);
    }

    private void SetGunProperties()
    {
        gunIndex = gunScript.gunIndex;
        _recoilForce = gunScript.recoilForce;
        _bulletSpeed = gunScript.bulletSpeed;
        _rechargeSpeed = gunScript.rechargeSpeed;
        _bulletLifetime = gunScript.bulletLifetime;
        ammos = gunScript.ammos + extraAmmos;
        _damage = gunScript.damage;
        _firePos = gunScript.firePos;
    }

    public virtual void Shot(Rigidbody2D rb)
    {

        if (gunScript.weaponType == WeaponType.Knife)
        {
            return;
        }
        if (!_isRecharged || ammos <= 0)
        {
            return;
        }

        gunScript.audioSource.pitch = Random.Range(0.6f, 1.5f);
        gunScript.audioSource.PlayOneShot(gunScript.shotSound);

        GameManager.instance.ShakeOnce();
        rb.AddForce(-_firePos.right * _recoilForce, ForceMode2D.Impulse);
        SpawnBullet();
        _isRecharged = false;
        _currentRecharge = 1;

        if (GameManager.instance.isGameStarted)
        {
            ammos -= 1;
        }
        if(ammos <= 0)
        {
            GameManager.instance.soundManager._vfxAudioSource.PlayOneShot(gunScript.noAmmoSound);
        }
        GameManager.instance.UiManager.SetAmmoStats(ammos, gunScript.ammos + extraAmmos);
    }

    private void SpawnBullet()
    {
        GameObject curBullet = Instantiate(gunScript.bullet, _firePos.position, _gunObj.transform.rotation) as GameObject;
        if(gunScript.weaponType == WeaponType.Shotgun)
        {
            Bullet[] fractionedBullets = curBullet.GetComponentsInChildren<Bullet>();
            curBullet.transform.localScale *= _bulletScaleModifier;
            Debug.Log(fractionedBullets.Length);
            foreach(Bullet bullet in fractionedBullets)
            {
                SetBulletProperties(bullet);
            }
            return;
        }

        SetBulletProperties(curBullet.GetComponent<Bullet>());
    }

    public void ClearAllLines()
    {
        ClearLineRenderer(_lineRenderer);
        ClearLineRenderer(_aimLineRenderer);
    }

    private void ClearLineRenderer(LineRenderer lineRenderer)
    {
        lineRenderer.SetPosition(0, Vector3.zero);
        lineRenderer.SetPosition(1, Vector3.zero);
    }

    private void SetBulletProperties(Bullet curBullet)
    {
        Bullet bulletComponent = curBullet;

        //The way to mutliply damage.
        float damageTrans = _damage * damageModifier;
        _damage = (int)damageTrans;
        bulletComponent.damage = _damage;



        bulletComponent.bulletSpeed = _bulletSpeed;
        bulletComponent.shootingScript = this;
        bulletComponent.parent = gameObject;
        bulletComponent.lifeTime = _bulletLifetime;
        bulletComponent.criticalDamageChance = criticalDamageChance;
#pragma warning disable CS0618 // Type or member is obsolete
        bulletComponent.explosionParticle.startColor = _spriteRenderer.color;
#pragma warning restore CS0618 // Type or member is obsolete
        curBullet.trailRenderer.startWidth *= _bulletScaleModifier;
        SetBulletColor(bulletComponent);
        Instantiate(shotParticle, _firePos.position, Quaternion.identity);
    }

    private void SetBulletColor(Bullet bullet_obj)
    {
        bullet_obj.spriteRenderer.color = _spriteRenderer.color;
        bullet_obj.trailRenderer.material.color = _spriteRenderer.color;
    }
}